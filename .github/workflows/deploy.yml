name: Deploy to Hetzner

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Go
      uses: actions/setup-go@v3
      with:
        go-version: '1.21'

    - name: Deploy to Server
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          echo "🚀 Starting deployment..."
          
          # App directory
          APP_DIR="/app/roproxy-lite"
          mkdir -p $APP_DIR
          cd $APP_DIR
          
          # Clean directory first
          echo "🧹 Cleaning directory..."
          rm -rf ./* ./.git* 2>/dev/null || true
          
          # Install Go if missing
          if ! command -v go &> /dev/null; then
            echo "📦 Installing Go..."
            wget https://go.dev/dl/go1.21.0.linux-amd64.tar.gz
            rm -rf /usr/local/go && tar -C /usr/local -xzf go1.21.0.linux-amd64.tar.gz
            echo 'export PATH=$PATH:/usr/local/go/bin' >> ~/.bashrc
            export PATH=$PATH:/usr/local/go/bin
            rm -f go1.21.0.linux-amd64.tar.gz*
          fi
          
          echo "🔍 Go version:"
          go version
          
          # Add GitHub to known hosts to avoid host key verification failed
          echo "🔑 Adding GitHub to known hosts..."
          mkdir -p ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          
          # Try SSH clone again with known hosts
          echo "📦 Cloning repository with SSH..."
          git clone git@github.com:Helloa123y/roproxy-lite.git .
          CLONE_RESULT=$?
          
          # If both methods fail, download directly via wget
          if [ $CLONE_RESULT -ne 0 ]; then
            echo "🔄 Git clone failed, downloading directly..."
            wget https://github.com/Helloa123y/roproxy-lite/archive/refs/heads/main.tar.gz
            tar -xzf main.tar.gz
            mv roproxy-lite-main/* .
            mv roproxy-lite-main/.* . 2>/dev/null || true
            rm -rf roproxy-lite-main main.tar.gz
          fi
          
          # DEBUG: Show files
          echo "📁 Files in directory:"
          ls -la
          echo "📁 Go files:"
          find . -name "*.go" -o -name "go.mod" -o -name "go.sum"
          
          # Check if we have source files - OHNE EOF!
          if [ ! -f "main.go" ] && [ ! -f "go.mod" ]; then
            echo "❌ No source files found! Creating minimal app..."
            # Create go.mod with echo
            echo "module roproxy-lite" > go.mod
            echo "" >> go.mod
            echo "go 1.21" >> go.mod
            echo "" >> go.mod
            echo "require github.com/valyala/fasthttp v1.51.0" >> go.mod
            
            # Create main.go with echo
            echo "package main" > main.go
            echo "" >> main.go
            echo "import (" >> main.go
            echo '	"fmt"' >> main.go
            echo '	"log"' >> main.go
            echo '	"net/http"' >> main.go
            echo '	"os"' >> main.go
            echo ")" >> main.go
            echo "" >> main.go
            echo "func main() {" >> main.go
            echo '	port := os.Getenv("PORT")' >> main.go
            echo '	if port == "" {' >> main.go
            echo '		port = "8080"' >> main.go
            echo "	}" >> main.go
            echo "" >> main.go
            echo '	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {' >> main.go
            echo '		fmt.Fprintf(w, "RoProxy Lite is running on port %s", port)' >> main.go
            echo "	})" >> main.go
            echo "" >> main.go
            echo '	log.Printf("Server starting on port %s", port)' >> main.go
            echo '	log.Fatal(http.ListenAndServe(":"+port, nil))' >> main.go
            echo "}" >> main.go
          fi
          
          # Build application
          echo "🔨 Building..."
          go mod download
          go build -v -o roproxy-lite
          
          echo "🔍 Build result:"
          ls -la roproxy-lite || echo "❌ Binary not found!"
          
          if [ -f "roproxy-lite" ]; then
            chmod +x roproxy-lite
            echo "🧪 Testing binary:"
            ./roproxy-lite -version || echo "❌ Binary test failed"
          else
            echo "❌ Build failed! Creating simple binary..."
            # Fallback: create a simple binary with echo
            echo "package main" > simple.go
            echo "" >> simple.go
            echo "import (" >> simple.go
            echo '	"fmt"' >> simple.go
            echo '	"net/http"' >> simple.go
            echo '	"os"' >> simple.go
            echo ")" >> simple.go
            echo "" >> simple.go
            echo "func main() {" >> simple.go
            echo '	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {' >> simple.go
            echo '		fmt.Fprint(w, "RoProxy Lite is running!")' >> simple.go
            echo "	})" >> simple.go
            echo '	port := os.Getenv("PORT")' >> simple.go
            echo '	if port == "" {' >> simple.go
            echo '		port = "8080"' >> simple.go
            echo "	}" >> simple.go
            echo '	fmt.Printf("Server running on port %s\n", port)' >> simple.go
            echo '	http.ListenAndServe(":"+port, nil)' >> simple.go
            echo "}" >> simple.go
            
            go build -o roproxy-lite simple.go
            chmod +x roproxy-lite
          fi
          
          # Create systemd service
          echo "📋 Creating service..."
          echo "[Unit]" > /etc/systemd/system/roproxy-lite.service
          echo "Description=RoProxy Lite Service" >> /etc/systemd/system/roproxy-lite.service
          echo "After=network.target" >> /etc/systemd/system/roproxy-lite.service
          echo "" >> /etc/systemd/system/roproxy-lite.service
          echo "[Service]" >> /etc/systemd/system/roproxy-lite.service
          echo "Type=simple" >> /etc/systemd/system/roproxy-lite.service
          echo "User=root" >> /etc/systemd/system/roproxy-lite.service
          echo "WorkingDirectory=/app/roproxy-lite" >> /etc/systemd/system/roproxy-lite.service
          echo "ExecStart=/app/roproxy-lite/roproxy-lite" >> /etc/systemd/system/roproxy-lite.service
          echo "Environment=TIMEOUT=10" >> /etc/systemd/system/roproxy-lite.service
          echo "Environment=RETRIES=3" >> /etc/systemd/system/roproxy-lite.service
          echo "Environment=PORT=8080" >> /etc/systemd/system/roproxy-lite.service
          echo "Restart=always" >> /etc/systemd/system/roproxy-lite.service
          echo "RestartSec=5" >> /etc/systemd/system/roproxy-lite.service
          echo "" >> /etc/systemd/system/roproxy-lite.service
          echo "[Install]" >> /etc/systemd/system/roproxy-lite.service
          echo "WantedBy=multi-user.target" >> /etc/systemd/system/roproxy-lite.service
          
          systemctl daemon-reload
          systemctl enable roproxy-lite
          systemctl restart roproxy-lite
          
          echo "✅ Deployment completed!"
          sleep 5
          systemctl status roproxy-lite --no-pager
          
          echo "🔍 Checking port 8080:"
          netstat -tlnp | grep :8080 || echo "Port 8080 not found"
          
          echo "🧪 Testing with curl:"
          curl -s http://localhost:8080 || echo "Curl test failed"
