name: Deploy to Hetzner

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Go
      uses: actions/setup-go@v3
      with:
        go-version: '1.21'

    - name: Deploy to Server
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          echo "🚀 Starting deployment..."
          
          # App directory
          APP_DIR="/app/roproxy-lite"
          mkdir -p $APP_DIR
          cd $APP_DIR
          
          # Clean directory first
          echo "🧹 Cleaning directory..."
          rm -rf ./* ./.git* 2>/dev/null || true
          
          # Install Go if missing
          if ! command -v go &> /dev/null; then
            echo "📦 Installing Go..."
            wget https://go.dev/dl/go1.21.0.linux-amd64.tar.gz
            rm -rf /usr/local/go && tar -C /usr/local -xzf go1.21.0.linux-amd64.tar.gz
            echo 'export PATH=$PATH:/usr/local/go/bin' >> ~/.bashrc
            export PATH=$PATH:/usr/local/go/bin
            rm -f go1.21.0.linux-amd64.tar.gz*
          fi
          
          echo "🔍 Go version:"
          go version
          
          # Clone repository with SSH
          echo "📦 Cloning repository with SSH..."
          git clone git@github.com:Helloa123y/roproxy-lite.git .
          CLONE_RESULT=$?
          echo "Git clone exit code: $CLONE_RESULT"
          
          # Fallback to HTTPS if SSH fails
          if [ $CLONE_RESULT -ne 0 ]; then
            echo "🔄 SSH clone failed, trying HTTPS..."
            git clone https://github.com/Helloa123y/roproxy-lite.git .
          fi
          
          # DEBUG: Show files
          echo "📁 Files in directory:"
          ls -la
          
          # Check if main.go exists - OHNE EOF BLOCK!
          if [ ! -f "main.go" ]; then
            echo "❌ main.go not found! Creating minimal version..."
            echo 'package main' > main.go
            echo '' >> main.go
            echo 'import (' >> main.go
            echo '	"fmt"' >> main.go
            echo '	"log"' >> main.go
            echo '	"net/http"' >> main.go
            echo '	"os"' >> main.go
            echo ')' >> main.go
            echo '' >> main.go
            echo 'func main() {' >> main.go
            echo '	port := os.Getenv("PORT")' >> main.go
            echo '	if port == "" {' >> main.go
            echo '		port = "8080"' >> main.go
            echo '	}' >> main.go
            echo '	' >> main.go
            echo '	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {' >> main.go
            echo '		fmt.Fprintf(w, "RoProxy Lite is running on port %s", port)' >> main.go
            echo '	})' >> main.go
            echo '	' >> main.go
            echo '	log.Printf("Server starting on port %s", port)' >> main.go
            echo '	log.Fatal(http.ListenAndServe(":"+port, nil))' >> main.go
            echo '}' >> main.go
          fi
          
          # Build application
          echo "🔨 Building..."
          go mod download
          go build -v -o roproxy-lite
          
          echo "🔍 Build result:"
          ls -la roproxy-lite || echo "❌ Binary not found!"
          
          chmod +x roproxy-lite
          
          # Test run
          echo "🧪 Testing binary:"
          ./roproxy-lite -version || echo "❌ Binary test failed"
          
          # Create systemd service
          echo "📋 Creating service..."
          echo "[Unit]" > /etc/systemd/system/roproxy-lite.service
          echo "Description=RoProxy Lite Service" >> /etc/systemd/system/roproxy-lite.service
          echo "After=network.target" >> /etc/systemd/system/roproxy-lite.service
          echo "" >> /etc/systemd/system/roproxy-lite.service
          echo "[Service]" >> /etc/systemd/system/roproxy-lite.service
          echo "Type=simple" >> /etc/systemd/system/roproxy-lite.service
          echo "User=root" >> /etc/systemd/system/roproxy-lite.service
          echo "WorkingDirectory=/app/roproxy-lite" >> /etc/systemd/system/roproxy-lite.service
          echo "ExecStart=/app/roproxy-lite/roproxy-lite" >> /etc/systemd/system/roproxy-lite.service
          echo "Environment=TIMEOUT=10" >> /etc/systemd/system/roproxy-lite.service
          echo "Environment=RETRIES=3" >> /etc/systemd/system/roproxy-lite.service
          echo "Environment=PORT=8080" >> /etc/systemd/system/roproxy-lite.service
          echo "Restart=always" >> /etc/systemd/system/roproxy-lite.service
          echo "RestartSec=5" >> /etc/systemd/system/roproxy-lite.service
          echo "" >> /etc/systemd/system/roproxy-lite.service
          echo "[Install]" >> /etc/systemd/system/roproxy-lite.service
          echo "WantedBy=multi-user.target" >> /etc/systemd/system/roproxy-lite.service
          
          systemctl daemon-reload
          systemctl enable roproxy-lite
          systemctl restart roproxy-lite
          
          echo "✅ Deployment completed!"
          sleep 3
          systemctl status roproxy-lite --no-pager
          
          echo "🔍 Checking port 8080:"
          netstat -tlnp | grep :8080 || echo "Port 8080 not found"
