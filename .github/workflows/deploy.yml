name: Deploy to Hetzner

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Go
      uses: actions/setup-go@v3
      with:
        go-version: '1.21'

    - name: Deploy to Server
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          echo "🚀 Starting deployment..."
          
          # App directory
          APP_DIR="/app/roproxy-lite"
          mkdir -p $APP_DIR
          cd $APP_DIR
          
          # Stopping services
          echo "🛑 Stopping any running services..."
          systemctl stop roproxy-lite || echo "⚠️ Service not running"
          systemctl disable roproxy-lite || echo "⚠️ Service not enabled"
          sleep 2
          
          # Clean directory
          echo "🧹 Cleaning directory..."
          rm -rf ./* ./.git* 2>/dev/null || true
          
          # 🔥 CRITICAL: Install Go PROPERLY
          echo "📦 Checking Go installation..."
          if ! command -v go &> /dev/null; then
            echo "🔧 Installing Go..."
            # Remove any existing Go installation
            rm -rf /usr/local/go
            # Download and install Go
            wget https://go.dev/dl/go1.21.0.linux-amd64.tar.gz
            tar -C /usr/local -xzf go1.21.0.linux-amd64.tar.gz
            # Add Go to PATH permanently
            echo 'export PATH=$PATH:/usr/local/go/bin' >> ~/.bashrc
            echo 'export PATH=$PATH:/usr/local/go/bin' >> ~/.profile
            # Add to current session
            export PATH=$PATH:/usr/local/go/bin
            # Cleanup
            rm go1.21.0.linux-amd64.tar.gz
            echo "✅ Go installed successfully"
          else
            echo "✅ Go is already installed"
          fi
          
          # Verify Go installation
          echo "🔍 Go version:"
          /usr/local/go/bin/go version || go version
          
          # Download repository
          echo "📦 Downloading repository..."
          wget https://github.com/Helloa123y/roproxy-lite/archive/refs/heads/main.tar.gz -O repo.tar.gz
          if [ -f "repo.tar.gz" ]; then
            echo "📦 Extracting repository..."
            tar -xzf repo.tar.gz
            mv roproxy-lite-main/* .
            mv roproxy-lite-main/.* . 2>/dev/null || true
            rm -rf roproxy-lite-main repo.tar.gz
          else
            echo "❌ Download failed, trying git clone..."
            git clone https://github.com/Helloa123y/roproxy-lite.git . --depth=1
          fi
          
          # DEBUG
          echo "📁 Files in directory:"
          ls -la
          
          # Build application with FULL PATH to go
          echo "🔨 Building..."
          cd /app/roproxy-lite
          /usr/local/go/bin/go mod tidy || go mod tidy
          /usr/local/go/bin/go mod download || go mod download
          /usr/local/go/bin/go build -v -o roproxy-lite || go build -v -o roproxy-lite
          
          echo "🔍 Build result:"
          ls -la roproxy-lite
          
          if [ ! -f "roproxy-lite" ]; then
            echo "❌ Build failed! Cannot continue."
            exit 1
          fi
          
          chmod +x roproxy-lite
          
          # Create systemd service
          echo "📋 Creating service..."
          echo "[Unit]" > /etc/systemd/system/roproxy-lite.service
          echo "Description=RoProxy Lite Service" >> /etc/systemd/system/roproxy-lite.service
          echo "After=network.target" >> /etc/systemd/system/roproxy-lite.service
          echo "" >> /etc/systemd/system/roproxy-lite.service
          echo "[Service]" >> /etc/systemd/system/roproxy-lite.service
          echo "Type=simple" >> /etc/systemd/system/roproxy-lite.service
          echo "User=root" >> /etc/systemd/system/roproxy-lite.service
          echo "WorkingDirectory=$APP_DIR" >> /etc/systemd/system/roproxy-lite.service
          echo "ExecStart=$APP_DIR/roproxy-lite" >> /etc/systemd/system/roproxy-lite.service
          echo "Environment=TIMEOUT=10" >> /etc/systemd/system/roproxy-lite.service
          echo "Environment=RETRIES=3" >> /etc/systemd/system/roproxy-lite.service
          echo "Environment=PORT=8080" >> /etc/systemd/system/roproxy-lite.service
          echo "Restart=always" >> /etc/systemd/system/roproxy-lite.service
          echo "RestartSec=5" >> /etc/systemd/system/roproxy-lite.service
          echo "" >> /etc/systemd/system/roproxy-lite.service
          echo "[Install]" >> /etc/systemd/system/roproxy-lite.service
          echo "WantedBy=multi-user.target" >> /etc/systemd/system/roproxy-lite.service
          
          systemctl daemon-reload
          systemctl enable roproxy-lite
          systemctl start roproxy-lite
          
          echo "✅ Deployment completed!"
          sleep 5
          systemctl status roproxy-lite --no-pager
          
          echo "🔍 Checking port 8080:"
          netstat -tlnp | grep :8080 || echo "Port 8080 not found"
          
          echo "🧪 Testing with curl:"
          curl -s http://localhost:8080 || echo "Curl failed"
