name: Deploy to Hetzner

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Go
      uses: actions/setup-go@v3
      with:
        go-version: '1.21'

    - name: Deploy to Server
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          echo "üöÄ Starting deployment..."
          
          # App directory
          APP_DIR="/app/roproxy-lite"
          mkdir -p $APP_DIR
          cd $APP_DIR
          
          # Install Go if missing
          if ! command -v go &> /dev/null; then
            echo "üì¶ Installing Go..."
            wget https://go.dev/dl/go1.21.0.linux-amd64.tar.gz
            rm -rf /usr/local/go && tar -C /usr/local -xzf go1.21.0.linux-amd64.tar.gz
            echo 'export PATH=$PATH:/usr/local/go/bin' >> ~/.bashrc
            export PATH=$PATH:/usr/local/go/bin
          fi
          
          # Show Go version for debugging
          echo "üîç Go version:"
          go version
          
          # Clone or pull repository
          if [ ! -d ".git" ]; then
            echo "üì¶ Cloning repository..."
            git clone https://github.com/Helloa123y/roproxy-lite.git .
          else
            echo "üîÑ Pulling latest changes..."
            git pull origin main
          fi
          
          # Debug: Show files
          echo "üìÅ Files in directory:"
          ls -la
          
          # Build application
          echo "üî® Building..."
          go mod download
          go build -v -o roproxy-lite
          
          # Debug: Check if binary exists
          echo "üîç Build result:"
          ls -la roproxy-lite || echo "‚ùå Binary not found!"
          
          # Make binary executable
          chmod +x roproxy-lite
          
          # Debug: Check binary permissions
          echo "üîç Binary permissions:"
          ls -la roproxy-lite
          
          # Test run binary
          echo "üß™ Testing binary:"
          ./roproxy-lite -version || echo "‚ùå Binary test failed"
          
          # Create systemd service with echo commands (KEIN EOF!)
          echo "üìã Creating service..."
          echo "[Unit]" > /etc/systemd/system/roproxy-lite.service
          echo "Description=RoProxy Lite Service" >> /etc/systemd/system/roproxy-lite.service
          echo "After=network.target" >> /etc/systemd/system/roproxy-lite.service
          echo "" >> /etc/systemd/system/roproxy-lite.service
          echo "[Service]" >> /etc/systemd/system/roproxy-lite.service
          echo "Type=simple" >> /etc/systemd/system/roproxy-lite.service
          echo "User=root" >> /etc/systemd/system/roproxy-lite.service
          echo "WorkingDirectory=/app/roproxy-lite" >> /etc/systemd/system/roproxy-lite.service
          echo "ExecStart=/app/roproxy-lite/roproxy-lite" >> /etc/systemd/system/roproxy-lite.service
          echo "Environment=TIMEOUT=10" >> /etc/systemd/system/roproxy-lite.service
          echo "Environment=RETRIES=3" >> /etc/systemd/system/roproxy-lite.service
          echo "Environment=PORT=8080" >> /etc/systemd/system/roproxy-lite.service
          echo "Restart=always" >> /etc/systemd/system/roproxy-lite.service
          echo "RestartSec=5" >> /etc/systemd/system/roproxy-lite.service
          echo "" >> /etc/systemd/system/roproxy-lite.service
          echo "[Install]" >> /etc/systemd/system/roproxy-lite.service
          echo "WantedBy=multi-user.target" >> /etc/systemd/system/roproxy-lite.service
          
          # Enable and restart service
          systemctl daemon-reload
          systemctl enable roproxy-lite
          systemctl restart roproxy-lite
          
          # Check service status
          echo "‚úÖ Deployment completed!"
          sleep 3
          systemctl status roproxy-lite --no-pager
          
          # Show logs if failed
          if systemctl is-failed roproxy-lite; then
            echo "‚ùå Service failed, showing logs:"
            journalctl -u roproxy-lite -n 20 --no-pager
          fi
