name: Deploy to Hetzner

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Go
      uses: actions/setup-go@v3
      with:
        go-version: '1.21'

    - name: Deploy to Server
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          echo "🚀 Starting deployment..."
          
          # App directory
          APP_DIR="/app/roproxy-lite"
          mkdir -p $APP_DIR
          cd $APP_DIR
          
          # Clean directory first
          echo "🧹 Cleaning directory..."
          rm -rf ./* ./.git* 2>/dev/null || true
          
          # Install Go if missing
          if ! command -v go &> /dev/null; then
            echo "📦 Installing Go..."
            wget https://go.dev/dl/go1.21.0.linux-amd64.tar.gz
            rm -rf /usr/local/go && tar -C /usr/local -xzf go1.21.0.linux-amd64.tar.gz
            echo 'export PATH=$PATH:/usr/local/go/bin' >> ~/.bashrc
            export PATH=$PATH:/usr/local/go/bin
            rm -f go1.21.0.linux-amd64.tar.gz*
          fi
          
          echo "🔍 Go version:"
          go version
          
          # Download repository directly
          echo "📦 Downloading repository directly..."
          wget https://github.com/Helloa123y/roproxy-lite/archive/refs/heads/main.tar.gz -O repo.tar.gz
          
          if [ -f "repo.tar.gz" ]; then
            echo "📦 Extracting repository..."
            tar -xzf repo.tar.gz
            mv roproxy-lite-main/* .
            mv roproxy-lite-main/.* . 2>/dev/null || true
            rm -rf roproxy-lite-main repo.tar.gz
          else
            echo "❌ Download failed, trying git clone..."
            git clone https://github.com/Helloa123y/roproxy-lite.git . --depth=1
          fi
          
          # DEBUG: Show files
          echo "📁 Files in directory:"
          ls -la
          echo "📁 Go files:"
          find . -name "*.go" -o -name "go.mod" -o -name "go.sum"
          
          # Build application
          echo "🔨 Building..."
          if [ -f "go.mod" ]; then
            go mod download
            go build -v -o roproxy-lite
          else
            echo "❌ go.mod not found, creating it..."
            go mod init roproxy-lite
            go mod tidy
            go build -v -o roproxy-lite
          fi
          
          echo "🔍 Build result:"
          ls -la roproxy-lite || echo "❌ Binary not found!"
          
          if [ -f "roproxy-lite" ]; then
            chmod +x roproxy-lite
            echo "🧪 Testing binary (timeout after 3s)..."
            timeout 3s ./roproxy-lite -version || echo "✅ Binary started successfully (expected for server)"
          else
            echo "❌ Build failed! Creating simple binary..."
            # Fallback: create a simple binary
            echo 'package main' > simple.go
            echo '' >> simple.go
            echo 'import (' >> simple.go
            echo '    "fmt"' >> simple.go
            echo '    "net/http"' >> simple.go
            echo '    "os"' >> simple.go
            echo ')' >> simple.go
            echo '' >> simple.go
            echo 'func main() {' >> simple.go
            echo '    http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {' >> simple.go
            echo '        fmt.Fprint(w, "RoProxy Lite is running!")' >> simple.go
            echo '    })' >> simple.go
            echo '    port := os.Getenv("PORT")' >> simple.go
            echo '    if port == "" {' >> simple.go
            echo '        port = "8080"' >> simple.go
            echo '    }' >> simple.go
            echo '    fmt.Printf("Server running on port %s\n", port)' >> simple.go
            echo '    http.ListenAndServe(":"+port, nil)' >> simple.go
            echo '}' >> simple.go
            
            go build -o roproxy-lite simple.go
            chmod +x roproxy-lite
          fi
          
          # Create systemd service
          echo "📋 Creating service..."
          echo "[Unit]" > /etc/systemd/system/roproxy-lite.service
          echo "Description=RoProxy Lite Service" >> /etc/systemd/system/roproxy-lite.service
          echo "After=network.target" >> /etc/systemd/system/roproxy-lite.service
          echo "" >> /etc/systemd/system/roproxy-lite.service
          echo "[Service]" >> /etc/systemd/system/roproxy-lite.service
          echo "Type=simple" >> /etc/systemd/system/roproxy-lite.service
          echo "User=root" >> /etc/systemd/system/roproxy-lite.service
          echo "WorkingDirectory=/app/roproxy-lite" >> /etc/systemd/system/roproxy-lite.service
          echo "ExecStart=/app/roproxy-lite/roproxy-lite" >> /etc/systemd/system/roproxy-lite.service
          echo "Environment=TIMEOUT=10" >> /etc/systemd/system/roproxy-lite.service
          echo "Environment=RETRIES=3" >> /etc/systemd/system/roproxy-lite.service
          echo "Environment=PORT=8080" >> /etc/systemd/system/roproxy-lite.service
          echo "Restart=always" >> /etc/systemd/system/roproxy-lite.service
          echo "RestartSec=5" >> /etc/systemd/system/roproxy-lite.service
          echo "" >> /etc/systemd/system/roproxy-lite.service
          echo "[Install]" >> /etc/systemd/system/roproxy-lite.service
          echo "WantedBy=multi-user.target" >> /etc/systemd/system/roproxy-lite.service
          
          systemctl daemon-reload
          systemctl enable roproxy-lite
          systemctl restart roproxy-lite
          
          echo "✅ Deployment completed!"
          sleep 3
          systemctl status roproxy-lite --no-pager
          
          echo "🔍 Checking port 8080:"
          netstat -tlnp | grep :8080 || echo "Port 8080 not found"
          
          echo "🧪 Testing with curl (timeout after 5s):"
          timeout 5s curl -s http://localhost:8080 || echo "⚠️ Curl timeout (server may be starting)"
